uk_raster_WGS84 <- raster(xmn=-11,  xmx=2,  ymn=49.5, ymx=59,
res=0.5, crs="+init=epsg:4326")
hasValues(uk_raster_WGS84)
# Add data to the raster: just the number 1 to number of cells
values(uk_raster_WGS84) <- seq(length(uk_raster_WGS84))
print(uk_raster_WGS84)
#plot the raster
plot(uk_raster_WGS84)
plot(st_geometry(uk_eire), add=TRUE, border='black', lwd=2, col='#FFFFFF44')
###changing raster resolution
# Define a simple 4 x 4 square raster
m <- matrix(c(1, 1, 3, 3,
1, 2, 4, 3,
5, 5, 7, 8,
6, 6, 7, 7), ncol=4, byrow=TRUE)
square <- raster(m)
###aggregating rasters
#testing aggregation through average, maximum, mode
# Average values
square_agg_mean <- aggregate(square, fact=2, fun=mean)
as.matrix(square_agg_mean)
# Maximum values
square_agg_max <- aggregate(square, fact=2, fun=max)
as.matrix(square_agg_max)
# Modal values for categories
square_agg_modal <- aggregate(square, fact=2, fun=modal)
as.matrix(square_agg_modal)
#disaggregating rasters
#observing options: interpolations and copying parents
# Copy parents
square_disagg <- disaggregate(square, fact=2)
as.matrix(square_disagg)
# Interpolate
square_disagg_interp <- disaggregate(square, fact=2, method='bilinear')
as.matrix(square_disagg_interp)
###Resampling
#previous two functions donâ€™t change the origin or alignments of cell
#borders at all: they just lump or split values within the same grid framework
#where you have differences is when you use resample(), which is a simple
#case of reprojecting a raster
### reprojecting a raster
#we want to get from a 0.5Âº WGS84 raster projection to a BNG one
# make two simple `sfc` objects containing points in  the
# lower left and top right of the two grids
uk_pts_WGS84 <- st_sfc(st_point(c(-11, 49.5)), st_point(c(2, 59)), crs=4326)
uk_pts_BNG <- st_sfc(st_point(c(-2e5, 0)), st_point(c(7e5, 1e6)), crs=27700)
#  Use st_make_grid to quickly create a polygon grid with the right cellsize
uk_grid_WGS84 <- st_make_grid(uk_pts_WGS84, cellsize=0.5)
uk_grid_BNG <- st_make_grid(uk_pts_BNG, cellsize=1e5)
# Reproject BNG grid into WGS84
uk_grid_BNG_as_WGS84 <- st_transform(uk_grid_BNG, 4326)
# Plot the features
graphics.off()
plot(uk_grid_WGS84, asp=1, border='grey', xlim=c(-13,4))
plot(st_geometry(uk_eire), add=TRUE, border='darkgreen', lwd=2)
plot(uk_grid_BNG_as_WGS84, border='red', add=TRUE)
#after creating a preallocated raster, we use projectRaster() to either
#interpolate (method="bilinear") or copy parent/nearest neighbour (method="ngb")
# Create the target raster
uk_raster_BNG <- raster(xmn=-200000, xmx=700000, ymn=0, ymx=1000000,
res=100000, crs='+init=epsg:27700')
uk_raster_BNG_interp <- projectRaster(uk_raster_WGS84, uk_raster_BNG, method='bilinear')
uk_raster_BNG_ngb <- projectRaster(uk_raster_WGS84, uk_raster_BNG, method='ngb')
# compare the values in the top row
round(values(uk_raster_BNG_interp)[1:9], 2)
values(uk_raster_BNG_ngb)[1:9]
#plot the differences
par(mfrow=c(1,2), mar=c(1,1,2,1))
plot(uk_raster_BNG_interp, main='Interpolated', axes=FALSE, legend=FALSE)
plot(uk_raster_BNG_ngb, main='Nearest Neighbour',axes=FALSE, legend=FALSE)
str(uk_eire_BNG)
##vector to raster
#rasterize the uk_eire_BNG vector data onto a 20km resolution grid
# Create the target raster
uk_20km <- raster(xmn=-200000, xmx=650000, ymn=0, ymx=1000000,
res=20000, crs='+init=epsg:27700')
str(uk_eire_BNG)
uk_eire_BNG$name <-as.factor(uk_eire_BNG$name) #change values to factor
# Rasterizing polygons
uk_eire_poly_20km  <- rasterize(as(uk_eire_BNG, 'Spatial'), uk_20km, field='name')
# Rasterizing lines
uk_eire_BNG_line <- st_cast(uk_eire_BNG, 'LINESTRING')
#to avoid warning messages make sf attributes constant
st_agr(uk_eire_BNG) <- 'constant'
# Rasterizing lines
uk_eire_BNG_line <- st_cast(uk_eire_BNG, 'LINESTRING')
uk_eire_line_20km <- rasterize(as(uk_eire_BNG_line, 'Spatial'), uk_20km, field='name')
# Rasterizing points
# - This isn't quite as neat. You need to take two steps in the cast and need to convert
#   the name factor to numeric.
uk_eire_BNG_point <- st_cast(st_cast(uk_eire_BNG, 'MULTIPOINT'), 'POINT')
uk_eire_BNG_point$name <- as.factor(uk_eire_BNG_point$name)
uk_eire_point_20km <- rasterize(as(uk_eire_BNG_point, 'Spatial'), uk_20km, field='name')
uk_eire_BNG_point$name <- as.numeric(uk_eire_BNG_point$name)
uk_eire_point_20km <- rasterize(as(uk_eire_BNG_point, 'Spatial'), uk_20km, field='name')
# Plotting those different outcomes
# - Use the hcl.colors function to create a nice plotting palette
color_palette <- hcl.colors(6, palette='viridis', alpha=0.5)
# - Plot each raster
par(mfrow=c(1,3), mar=c(1,1,1,1))
plot(uk_eire_poly_20km, col=color_palette, legend=FALSE, axes=FALSE)
plot(st_geometry(uk_eire_BNG), add=TRUE, border='grey')
plot(uk_eire_line_20km, col=color_palette, legend=FALSE, axes=FALSE)
plot(st_geometry(uk_eire_BNG), add=TRUE, border='grey')
plot(uk_eire_point_20km, col=color_palette, legend=FALSE, axes=FALSE)
plot(st_geometry(uk_eire_BNG), add=TRUE, border='grey')
install.packages(rgeos)
install.packages("rgeos")
r
###raster to vector
library(rgeos)
###raster to vector
# rasterToPolygons returns a polygon for each cell and returns a Spatial object
poly_from_rast <- rasterToPolygons(uk_eire_poly_20km)
# but can be set to dissolve the boundaries between cells with identical values
poly_from_rast_dissolve <- rasterToPolygons(uk_eire_poly_20km, dissolve=TRUE)
poly_from_rast_dissolve <- as(poly_from_rast_dissolve, 'sf')
# rasterToPoints returns a matrix of coordinates and values.
points_from_rast <- rasterToPoints(uk_eire_poly_20km)
points_from_rast <- st_as_sf(data.frame(points_from_rast), coords=c('x','y'))
# Plot the outputs - using key.pos=NULL to suppress the key and
# reset=FALSE to avoid plot.sf altering the par() options
par(mfrow=c(1,3), mar=c(1,1,1,1))
plot(poly_from_rast['layer'], key.pos = NULL, reset = FALSE)
plot(poly_from_rast_dissolve, key.pos = NULL, reset = FALSE)
plot(points_from_rast, key.pos = NULL, reset = FALSE)
source("~/Documents/CMEECourseWork/Week3/Code/PP_Regress.R")
source("~/Documents/CMEECourseWork/Week3/Code/PP_Regress.R")
source("~/Documents/CMEECourseWork/Week3/Code/PP_Regress.R")
install.packages("maps")
require(maps)
load("../Data/GPDDFiltered.RData")
load("../Data/GPDDFiltered.RData")
View(gpdd)
?map
map(database = "world", exact = TRUE)
m<- map(database = "world", exact = TRUE)
m
m<- map(database = "world", exact = TRUE)
m
m <- map(database = "world")
m <- map(database = "world", myborder = 0.01)
m <- map(database = "world", regions = ".", exact = FALSE, boundary = TRUE,
interior = TRUE, projection = "", parameters = NULL, orientation = NULL,
fill = FALSE, col = 1, plot = TRUE, add = FALSE, namesonly = FALSE,
xlim = NULL, ylim = NULL, wrap = FALSE, resolution = if (plot) 1 else 0,
type = "l", bg = par("bg"), mar = c(4.1, 4.1, par("mar")[3], 0.1),
myborder = 0.01, namefield="name", lforce="n", ...)
m <- map(database = "world", regions = ".", exact = FALSE, boundary = TRUE,
interior = TRUE, projection = "", parameters = NULL, orientation = NULL,
fill = FALSE, col = 1, plot = TRUE, add = FALSE, namesonly = FALSE,
xlim = NULL, ylim = NULL, wrap = FALSE, resolution = if (plot) 1 else 0,
type = "l", bg = par("bg"), mar = c(4.1, 4.1, par("mar")[3], 0.1),
myborder = 0.01, namefield="name", lforce="n")
m <- map(database = "world", mar = c(4.1, 4.1, par("mar")[3], 0.1))
m <- map(database = "world", mar = c(0.1, 0.1, par("mar")[3], 0.1))
m <- map(database = "world", mar = c(4.1, 4.1, par("mar")[1], 0.1))
m <- map(database = "world", mar = c(4.1, 4.1, par("mar")0.1], 0.1))
m <- map(database = "world", mar = c(4.1, 4.1, par("mar")0.5], 0.1))
m <- map(database = "world", mar = c(4.1, 4.1, par("mar")1], 0.1))
m <- map(database = "world", mar = c(4.1, 4.1, par("mar")1], 1))
m <- map(database = "world", mar = c(4.1, 4.1, par("mar")1], 0.1))
m <- map(database = "world", mar = c(4.1, 4.1, par("mar")4.1], 0.1))
m <- map(database = "world", mar = c(4.1, 4.1, par("mar")[1], 0.1))
m <- map(database = "world", mar = c(4.1, 4.1, par("mar")[1], 0.1))
m <- map(database = "world" )
m <- map(database = "world", mar = c(4.1, 4.1, par("mar"), 0.1)
m <- map(database = "world", mar = c(4.1, 4.1, par("mar"), 1
m <- map(database = "world", mar = c(4.1, 4.1, par("mar"), 1)
m <- map(database = "world", mar = c(1, 1, 1, 1)
m <- map(database = "world", mar = c(1, 1, 1, 1) +0.1
m <- map(database = "world", mar = c(1, 1, 1, 1) + 0.1)
m <- map(database = "world", mar = c(1, 1, 1, 1))
m <- map(database = "world")
m <- map(database = "world")
worldmap <- map(database = "world")
locs <- load("../Data/GPDDFiltered.RData")
locs <- as.data.frame(load("../Data/GPDDFiltered.RData"))
locs <- load("../Data/GPDDFiltered.RData")
typeof(gpdd)
locs <- as.data.frame(load("../Data/GPDDFiltered.RData"))
worldmap <- map(database = "world")
locs <- map(database = locs)
locs <- map(database = locs[,c("[,2]", "[,3")])
locs <- map(database = locs, c("lat", "long"))
str(gpdd)
ggplot(map(database = "world"))
ggplot(map(database = "world"))
p <- ggplot(map(database = "world"))
locs <- as.data.frame(load("../Data/GPDDFiltered.RData"))
p <- map(database = "world")
View(p)
locs <- as.matrix(load("../Data/GPDDFiltered.RData"))
colnames(locs) <- c("names", "y", "x")
locs <- as.matrix(load("../Data/GPDDFiltered.RData"))
colnames(locs) <- c("names", "y", "x")
colnames(locs) <- c("y", "x")
View(gpdd)
colnames(locs) <- c("names", "y", "x")
locs <- as.data.frame(load("../Data/GPDDFiltered.RData"))
colnames(locs) <- c("names", "y", "x")
locs <- as.data.frame(load("../Data/GPDDFiltered.RData"))
p <- map(database = "world")
p <- map(database = "world")
p <- map(database = "world")
locs <- as.data.frame(load("../Data/GPDDFiltered.RData"))
p <- map(database = "world", xlim = range(locs$long))
data(locs)
locs <- load("../Data/GPDDFiltered.RData")
locs <- map(database = locs, c("lat", "long"), add=TRUE, projection = TRUE)
p <- map(database = "world", xlim = range(locs$long))
locs <- map(database = locs, c("lat", "long"), add=TRUE, projection = TRUE)
locs <- map(database = locs, c("lat", "long"), add=TRUE)
p <- map(database = "world", xlim = range(locs$long))
p <- map(database = "world")
locs <- map(database = locs, c("lat", "long"), add=TRUE)
map(database = locs, c("lat", "long"), add=TRUE)
p <- map(database = "world")
map(database = locs, c("lat", "long"), add=TRUE)
require(maps)
locs <- load("../Data/GPDDFiltered.RData")
p <- map(database = "world")
points(x = gpdd$long, y = gpdd$lat)
p <- map(database = "world", asp = 1)
points(x = gpdd$long, y = gpdd$lat)
View(gpdd)
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name)
str(gpdd)
p <- map(database = "world")
p <- map(database = "world")
load("../Data/GPDDFiltered.RData")
p <- map(database = "world")
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name)
p <- map(database = "world", fill = TRUE, col = "black")
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name)
p <- map(database = "world", fill = TRUE, col = "white", bg = "black")
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 6)
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16)
p <- map(database = "world", fill = TRUE, col = "white", bg = "black")
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16)
par(mfrow=c(2,1))
map(database = "world", fill = TRUE, col = "white", bg = "black", xlim = range(gpdd$long))
map(database = "world", fill = TRUE, col = "white", bg = "black", xlim = range(gpdd$long), ylim = gpdd$lat)
map(database = "world", fill = TRUE, col = "white", bg = "black", xlim = range(gpdd$long), ylim = range(gpdd$lat)
map(database = "world", fill = TRUE, col = "white", bg = "black", xlim = range(gpdd$long), ylim = range(gpdd$lat))
map(database = "world", fill = TRUE, col = "white", bg = "black", xlim = range(gpdd$long), ylim = range(gpdd$lat))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16)
par(mfrow=c(2,1))
map(database = "world", fill = TRUE, col = "white", bg = "black")
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16)
map(database = "world", fill = TRUE, col = "white", bg = "black", xlim = range(gpdd$long), ylim = range(gpdd$lat))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16)
par(fig=c(0,1,0.53,1))
map(database = "world", fill = TRUE, col = "white", bg = "black")
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16)
map(database = "world", fill = TRUE, col = "white", bg = "black")
par(mfrow=c(2,1))
map(database = "world", fill = TRUE, col = "white", bg = "black")
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16)
map(database = "world", fill = TRUE, col = "white", bg = "black", xlim = range(gpdd$long), ylim = range(gpdd$lat))
par(mfrow=c(2,1))
map(database = "world", fill = TRUE, col = "white", bg = "black")
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16)
map(database = "world", fill = TRUE, col = "white", bg = "black", xlim = range(gpdd$long), ylim = range(gpdd$lat))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16)
map(database = "world", fill = TRUE, col = "white", bg = "black", mar = c(4.1, 4.1, par("mar")[3], 0.1))
# draw the map
map(database = "world",
fill = TRUE,
col = "black",
bg = "black",
ylim = c(-60, 90),
border = "white")
require(maps)
load("../Data/GPDDFiltered.RData")
# draw the map
map(database = "world",
fill = TRUE,
col = "black",
bg = "black",
ylim = c(-60, 90),
border = "white")
# plot the points
points(x = gpdd$long,
y = gpdd$lat,
col = "yellow",
pch = 10,
cex = 0.7,
lwd = 1.1)
map(database = "world", fill = TRUE, col = "white", bg = "black", mar = c(4.1, 4.1, par("mar")[3], 0.1))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16)
map(database = "world", fill = TRUE, col = "black", bg = "white", mar = c(4.1, 4.1, par("mar")[3], 0.1))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16)
map(database = "world", fill = TRUE, col = "darkgreen", bg = "white", mar = c(4.1, 4.1, par("mar")[3], 0.1))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16)
map(database = "world", fill = TRUE, col = "darkgreen", bg = "lightblue", mar = c(4.1, 4.1, par("mar")[3], 0.1))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16)
map(database = "world", fill = TRUE, col = "darkgreen", bg = "lightblue", border = "white", mar = c(4.1, 4.1, par("mar")[3], 0.1))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16)
map(database = "world", fill = TRUE, col = "darkgreen", bg = "lightblue", border = "grey", mar = c(4.1, 4.1, par("mar")[3], 0.1))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16)
map(database = "world", fill = TRUE, col = "darkgreen", bg = "lightblue", border = "darkgreen", mar = c(4.1, 4.1, par("mar")[3], 0.1))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16)
map(database = "world", fill = TRUE, col = "darkgreen", bg = "blue", border = "darkgreen", mar = c(4.1, 4.1, par("mar")[3], 0.1))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16)
map(database = "world", fill = TRUE, col = "darkgreen", bg = "skyblue", border = "darkgreen", mar = c(4.1, 4.1, par("mar")[3], 0.1))
map(database = "world", fill = TRUE, col = "darkgreen", bg = "lightblue", border = "darkgreen", mar = c(4.1, 4.1, par("mar")[3], 0.1))
map(database = "world", fill = TRUE, col = "darkgreen", bg = "lightblue", border = "forestgreen", mar = c(4.1, 4.1, par("mar")[3], 0.1))
map(database = "world", fill = TRUE, col = "darkgreen", bg = "lightblue", border = "darkgreen", mar = c(4.1, 4.1, par("mar")[3], 0.1))
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", mar = c(4.1, 4.1, par("mar")[3], 0.1))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16)
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.7, lwd = 1.1)
# draw the map
map(database = "world",
fill = TRUE,
col = "black",
bg = "black",
ylim = c(-60, 90),
border = "white")
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", mar = c(4.1, 4.1, par("mar")[3], 0.1))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.7, lwd = 1.1)
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.8)
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.9)
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.7)
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", mar = c(4.1, 4.1, par("mar")[3], 0.1))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.7)
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-90,50))
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-50,50))
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-70,50))
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-70,50))
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-90,70))
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-90,70))
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-100,70))
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-150,70))
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-170,70))
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-160,70))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.7)
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-150,70))
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-150,50))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.7)
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-150,50), ylim = c(0,100))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.7)
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-150,50), ylim = c(20,100))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.7)
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-150,50), ylim = c(20,70))
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-150,50), ylim = c(20,90))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.7)
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-150,50), ylim = c(20,80))
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-150,50), ylim = c(20,90))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.9)
par(mfrow=c(2,1))
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen",)
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.7)
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-150,50), ylim = c(20,90))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.9)
par(mfrow=c(2,1))
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen",)
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.7)
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-150,50), ylim = c(20,90))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.9)
par(mfrow=c(2,1))
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen",)
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.7)
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-150,50), ylim = c(20,90))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.9)
par(mfcow=c(2,1))
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen",)
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.7)
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-150,50), ylim = c(20,90))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.9)
#western view
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-150,50), ylim = c(20,90))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.9)
#worldview
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen",)
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.7)
#worldview
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen",)
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.7)
#western view
map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen", xlim = c(-150,50), ylim = c(20,90))
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name, pch = 16, cex = 0.9)
legend()
legend(legend = "" "")
legend(x="bottom")
legend(x="bottom", col = gpdd$common.name)
legend(x="bottom", col = gpdd$common.name legend = gpdd$common.name)
legend(x="bottom", col = gpdd$common.name, legend = gpdd$common.name)
legend(col = gpdd$common.name, legend = gpdd$common.name)
legend(x="left", col = gpdd$common.name, legend = gpdd$common.name)
legend(x="left", col = gpdd$common.name, legend = unique(gpdd$common.name)
legend(x="left", col = gpdd$common.name, legend = unique(gpdd$common.name))
legend(x="left", col = gpdd$common.name, legend = unique(gpdd$common.name))
#worldview
map(database = "world", fill = TRUE, col = "forestgreen",
bg = "lightblue", border = "darkgreen",) #load world map
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name,
pch = 16, cex = 0.7) #superimpose points
legend(x="left", col = gpdd$common.name, legend = unique(gpdd$common.name))
legend(x="left", col = unique(gpdd$common.name), legend = unique(gpdd$common.name))
p <- points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name,
pch = 16, cex = 0.7) #superimpose points
require(ggplot)
require(ggplot2)
#worldview
map(database = "world", fill = TRUE, col = "forestgreen",
bg = "lightblue", border = "darkgreen",) #load world map
ggplot(x = gpdd$long, y = gpdd$lat)
?aes
ggplot(gpdd)
ggplot(gpdd)
z <- ggplot()
z <- ggplot() +
geom_point(gpdd)
z <- ggplot() +
geom_point(gpdd)
#ggplot
ggplot(data = world) +
geom_sf() +
#ggplot
ggplot(data = world) +
geom_sf()
#ggplot
ggplot(data = world) +
geom_sf()
#ggplot
ggplot(map(database = "world", fill = TRUE, col = "forestgreen",
bg = "lightblue", border = "darkgreen",) +
geom_sf())
#ggplot
ggplot(map(database = "world", fill = TRUE, col = "forestgreen",
bg = "lightblue", border = "darkgreen") +
geom_sf())
#ggplot
ggplot(map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen"))
#ggplot
s <- ggplot(map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen"))
#ggplot
s <- ggplot(map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen"))
#ggplot
s <- ggplot(map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen")) +
geom_point(data = gpdd, colour = gpdd$common.name)
#ggplot
s <- ggplot(map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen")) +
geom_point(data = gpdd, colour = gpdd$common.name, size = 4)
#ggplot
s <- ggplot(map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen")) +
geom_point(data = gpdd, colour = gpdd$common.name, size = 4)
#ggplot
s <- map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen") +
geom_point(data = gpdd, colour = gpdd$common.name, size = 4)
#ggplot
s <- map(database = "world", fill = TRUE, col = "forestgreen", bg = "lightblue", border = "darkgreen") +
geom_point(data = gpdd, colour = gpdd$common.name, size = 4)
#worldview using maps
m <- map(database = "world", fill = TRUE, col = "forestgreen",
bg = "lightblue", border = "darkgreen",) #load world map
#ggplot
s <- m +
geom_point(data = gpdd, colour = gpdd$common.name, size = 4)
#ggplot
s <- geom_point(data = gpdd, colour = gpdd$common.name, size = 4)
View(s)
require(ggplot2)
#dependency
require(maps)
#load data
load("../Data/GPDDFiltered.RData")
#worldview using maps
map(database = "world", fill = TRUE, col = "forestgreen",
bg = "lightblue", border = "darkgreen",) #load world map
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name,
pch = 16, cex = 0.7) #superimpose points
legend(x="left", legend = unique(gpdd$common.name))
legend(x="down", legend = unique(gpdd$common.name))
legend(x="bottomleft", legend = unique(gpdd$common.name))
#worldview using maps
map(database = "world", fill = TRUE, col = "forestgreen",
bg = "lightblue", border = "darkgreen",) #load world map
#worldview using maps
map(database = "world", fill = TRUE, col = "yellow",
bg = "lightblue", border = "darkgreen",) #load world map
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name,
pch = 16, cex = 0.7) #superimpose points
#worldview using maps
map(database = "world", fill = TRUE, col = "forestgreen",
bg = "lightblue", border = "darkgreen",) #load world map
points(x = gpdd$long, y = gpdd$lat, col = gpdd$common.name,
pch = 16, cex = 0.7) #superimpose points
#worldview using maps
map(database = "world", fill = TRUE, col = "grey",
bg = "white", border = "black",) #load world map
points(x = gpdd$long, y = gpdd$lat, col = green,
pch = 16, cex = 0.7) #superimpose points
points(x = gpdd$long, y = gpdd$lat, col = "green",
pch = 16, cex = 0.7) #superimpose points
points(x = gpdd$long, y = gpdd$lat, col = "blue",
pch = 16, cex = 0.7) #superimpose points
points(x = gpdd$long, y = gpdd$lat, col = "darkblue",
pch = 16, cex = 0.7) #superimpose points
points(x = gpdd$long, y = gpdd$lat, col = "darkgreen",
pch = 16, cex = 0.7) #superimpose points
points(x = gpdd$long, y = gpdd$lat, col = "yellow",
pch = 16, cex = 0.7) #superimpose points
points(x = gpdd$long, y = gpdd$lat, col = "blue",
pch = 16, cex = 0.7) #superimpose points
points(x = gpdd$long, y = gpdd$lat, col = "pink",
pch = 16, cex = 0.7) #superimpose points
points(x = gpdd$long, y = gpdd$lat, col = "fuscia",
pch = 16, cex = 0.7) #superimpose points
points(x = gpdd$long, y = gpdd$lat, col = "orange",
pch = 16, cex = 0.7) #superimpose points
