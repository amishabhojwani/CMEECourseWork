Exponential <- function(N0 = 1, r = 1, generations = 10){
# Runs a simulation of exponential growth
# Returns a vector of length generations
N <- rep(NA, generations)    # Creates a vector of NA
N[1] <- N0
for (t in 2:generations){
N[t] <- N[t-1] * exp(r)
browser()
}
return (N)
}
plot(Exponential(), type="l", main="Exponential growth")
View(Exponential)
View(Exponential)
View(Exponential)
?stop
?sample
popn <- rnorm(50)
hist(popn)
doit <- function(x){
temp_x <- sample(x, replace = TRUE)
if(length(unique(temp_x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(temp_x))))
}
else {
stop("Couldn't calculate mean: too few unique values!")
}
}
lapply(1:15, function(i) doit(popn))
lapply(1:15, function(i) doit(popn))
lapply(1:15, function(i) try(doit(popn)))
?try
lapply(1:15, function(i) try(doit(popn), silent = TRUE))
class(results)
class(result)
result <- lapply(1:15, function(i) try(doit(popn), silent = TRUE))
View(result)
result[[15]]
class(result)
result <- vector("list", 15) #Preallocate/Initialize
for(i in 1:15) {
result[[i]] <- try(doit(popn), FALSE)
}
View(result)
install.packages(c("tidyverse"))
Ricker <- function(N0=1, r=1, K=10, generations=50)
{
# Runs a simulation of the Ricker model
# Returns a vector of length generations
N <- rep(NA, generations)    # Creates a vector of NA
N[1] <- N0
for (t in 2:generations)
{
N[t] <- N[t-1] * exp(r*(1.0-(N[t-1]/K)))
}
return (N)
}
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)){#loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr,pop] <- N[yr-1,pop] * exp(r * (1 - N[yr - 1,pop] / K) + rnorm(1,0,sigma))
}
}
return(N)
}
rm(list=ls())
p0=runif(1000,.5,1.5)
View(p0)
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)){#loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr,pop] <- N[yr-1,pop] * exp(r * (1 - N[yr - 1,pop] / K) + rnorm(1,0,sigma))
}
}
return(N)
}
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
N[1,]<-p0
# Runs the stochastic Ricker equation with gaussian fluctuations
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)){#loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr,pop] <- N[yr-1,pop] * exp(r * (1 - N[yr - 1,pop] / K) + rnorm(1,0,sigma))
}
}
return(N)
}
N
}
View(stochrick)
N<-matrix(NA,numyears,length(p0))
numyears=100
p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2
p0=runif(1000,.5,1.5)
r=1.2
K=1
sigma=0.2
N<-matrix(NA,numyears,length(p0))
View(N)
N[1,]<-p0
rnorm(1,0,sigma)
?rnorm
plot(stochrick(generations=100), type="l")
# Runs the stochastic Ricker equation with gaussian fluctuations
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)){ #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr,pop] <- N[yr-1,pop] * exp(r * (1 - N[yr - 1,pop] / K) + rnorm(1,0,sigma))
}
}
return(N)
}
plot(stochrick(generations=100), type="l")
#stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
# Now write another function called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
# print("Vectorized Stochastic Ricker takes:")
# print(system.time(res2<-stochrickvect()))
plot(stochrick(numyears = 100), type="l")
Ricker <- function(N0=1, r=1, K=10, generations=50)
{
# Runs a simulation of the Ricker model
# Returns a vector of length generations
N <- rep(NA, generations)    # Creates a vector of NA
N[1] <- N0
for (t in 2:generations)
{
N[t] <- N[t-1] * exp(r*(1.0-(N[t-1]/K)))
}
return (N)
}
plot(Ricker(generations=10), type="l")
p0=runif(1000,.5,1.5)
r=1.2
K=1
sigma=0.2
numyears=100
N<-matrix(NA,numyears,length(p0))
View(N)
N[1,]<-p0
#initialise
N<-data.frame(NA,numyears,length(p0))
#initialise
N<-matrix(NA,numyears,length(p0))
as.data.frame(N)
Ndata<-as.data.frame(N)
View(Ndata)
#initialise
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
?lapply
?apply
apply(N, 2, calculate_N)
calculate_N <- N[yr-1,pop] * exp(r * (1 - N[yr - 1,pop] / K) + rnorm(1,0,sigma))
view(N[1])
View(N[1])
View(N[1,])
N[yr, pop] <- N[yr-1,pop] * exp(r * (1 - N[yr - 1,pop] / K) + rnorm(1,0,sigma))
apply(N, 2, N[yr, pop])
yr <- N[1:numyears,]
View(yr)
pop <- N[,1:length(p0)]
View(pop)
N[yr, pop] <- N[yr-1,pop] * exp(r * (1 - N[yr - 1,pop] / K) + rnorm(1,0,sigma))
apply(N, 2, N[yr, pop])
?each
updateR()
check.for.updates.R(notify_user = TRUE, GUI = TRUE,page_with_download_url = "https://cran.rstudio.com/bin/windows/base/", pat = "R-[0-9.]+.+-win\\.exe")
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
setwd("~/Documents/CMEECourseWork/Week3/Code")
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = FALSE))
class(MyData)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = TRUE,  sep=";")
class(MyMetaData)
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = TRUE,  sep=";")
class(MyMetaData)
?file
head(MyDat)
head(MyData)
View(MyData)
?melt
############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package
?melt #check out the melt function
?str
View(MyMetaData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")
############# set wd ###############
setwd("~/Documents/CMEECourseWork/Week3/Code")
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv", header = FALSE))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv", header = TRUE, sep = ";")
############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyData) #you can also do this
fix(MyMetaData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData)
head(MyData)
dim(MyData)
View(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
View(TempData)
TempData <- as.data.frame(MyData[-6,],stringsAsFactors = F) #stringsAsFactors = F is important!
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package
?melt #check out the melt function
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
View(MyWrangledData)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
############# Exploring the data ###############
require(tidyverse)
install.packages("tidyverse")
